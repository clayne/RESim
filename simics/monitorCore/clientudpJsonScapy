#!/usr/bin/env python3
#
#  Send multiple UDP packets as read from a json file.
#  with packets delimited by json entries
#  Script uses Scapy to spoof source IP and port.
#
from scapy.all import UDP, IP, Ether, Raw, sendp
import sys
import time
import os
import socket
import json
import binascii
import argparse

parser = argparse.ArgumentParser(prog='drive-driver.py', description='Send files to the driver and from there to one or more targets.')
parser.add_argument('-d', '--device', action='store', help='Ethernet device to write data to.')
parser.add_argument('-i', '--ip', action='store', help='IP address of destination.')
parser.add_argument('-p', '--port', type=int, action='store', help='PORT of destination.')
parser.add_argument('-I', '--src_ip', action='store', help='Optional IP of source.')
parser.add_argument('-P', '--src_port', type=int, action='store', help='Optional PORT of source.')
parser.add_argument('-f', '--file', action='store', help='list of files.')
args = parser.parse_args()

#server_addr = ('localhost', port)
flist = args.file.strip().split()
if args.src_ip:
    ip_packet = IP(dst=args.ip,src=args.src_ip)
else:
    ip_packet = IP(dst=args.ip)
if args.src_port:
    udp_packet = ip_packet/UDP(sport=args.src_port, dport=args.port)
else:
    udp_packet = ip_packet/UDP(dport=args.port)

for file in flist:
    infile = os.path.join('/tmp', file)
    if os.path.isfile(infile):
        print('will open %s' % infile)
        with open (infile) as fh:
            data = fh.read()
            print('did open and read %s' % infile)
            udp_json = json.loads(data)
            for packet in udp_json:
                packet_hex = eval(packet)
                packet_bytes = binascii.unhexlify(packet_hex)
                packet = udp_packet/Raw(load=packet_bytes)
                sendp(Ether()/packet, iface=args.device)
                print('len packet is %d' % len(packet_bytes))
    else:
        print('Failed to find file %s' % infile)

